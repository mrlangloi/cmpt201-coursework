#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct header {
  uint64_t size;
  struct header *next;
  int id;
};

void initialize_block(struct header *block, uint64_t size, struct header *next,
                      int id) {
  block->size = size;
  block->next = next;
  block->id = id;
}

int find_first_fit(struct header *free_list_ptr, uint64_t size) {
  // TODO: Implement first fit

  if (free_list_ptr == NULL) {
    return -1;
  }

  // initialize a moving pointer to iterate through linked-list
  struct header *current = free_list_ptr;

  while (current != NULL) {
    if (current->size >= size) {
      return current->id;
    }
    current = current->next;
  }

  return -1;
}

int find_best_fit(struct header *free_list_ptr, uint64_t size) {
  int best_fit_id = -1;
  // TODO: Implement best fit

  if (free_list_ptr == NULL) {
    return best_fit_id;
  }

  // initialize moving pointer
  struct header *current = free_list_ptr;
  uint64_t best_size = 0;

  // find the first block size that is >= size, initialize our best_size as that
  while (current != NULL) {
    if (current->size >= size) {
      best_size = current->size;
      break;
    }
    current = current->next;
  }

  // reset the pointer
  current = free_list_ptr;

  // find the smallest size that is >= size and <= current best size
  while (current != NULL) {
    if (current->size >= size && current->size <= best_size) {
      best_size = current->size;
      best_fit_id = current->id;
    }
    current = current->next;
  }

  return best_fit_id;
}

int find_worst_fit(struct header *free_list_ptr, uint64_t size) {
  int worst_fit_id = -1;
  // TODO: Implement worst fit

  if (free_list_ptr == NULL) {
    return worst_fit_id;
  }

  // initialize moving pointer and a variable to track biggest size
  struct header *current = free_list_ptr;
  uint64_t biggest_size = current->size;

  while (current != NULL) {
    if (current->size >= size && current->size > biggest_size) {
      biggest_size = current->size;
      worst_fit_id = current->id;
    }
    current = current->next;
  }

  return worst_fit_id;
}

int main(void) {

  struct header *free_block1 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block2 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block3 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block4 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block5 = (struct header *)malloc(sizeof(struct header));

  initialize_block(free_block1, 6, free_block2, 1);
  initialize_block(free_block2, 12, free_block3, 2);
  initialize_block(free_block3, 24, free_block4, 3);
  initialize_block(free_block4, 8, free_block5, 4);
  initialize_block(free_block5, 4, NULL, 5);

  struct header *free_list_ptr = free_block1;

  int first_fit_id = find_first_fit(free_list_ptr, 7);
  int best_fit_id = find_best_fit(free_list_ptr, 7);
  int worst_fit_id = find_worst_fit(free_list_ptr, 7);

  // TODO: Print out the IDs
  printf("The ID for First-Fit algorithm is: %d\n", first_fit_id);
  printf("The ID for Best-Fit algorithm is: %d\n", best_fit_id);
  printf("The ID for Worst-Fit algorithm is: %d\n", worst_fit_id);

  free(free_block1);
  free(free_block2);
  free(free_block3);
  free(free_block4);
  free(free_block5);

  return 0;
}

/*
 * loop from start to end of the memory segment
 *    if current block is free:
 *      if the block at the current address + current size (i.e. the next block) is free:
 *        merge with next block
 *        update current size
 *        continue
 *    proceed to the next block, current block = current address + current size
 * 
 * this algorithm should merge free blocks that are adjacent to each other
 * although it traverses through used blocks, it does not alter any of their data
 */

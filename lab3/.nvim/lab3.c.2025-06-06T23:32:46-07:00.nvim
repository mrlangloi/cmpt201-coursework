#define _POSIX_C_SOURCE 200809L
#include <signal.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

const int MAX_ENTRIES = 5;
const int MAX_LENGTH = 100;

char *line;

void handle_sigint(int signum) {
  free(line);
  exit(EXIT_SUCCESS);
}

void printHistory(char history[][MAX_LENGTH], int totalInputs) {
  // set our starting point so that we print oldest input first
  int start = totalInputs < MAX_ENTRIES ? 0 : totalInputs % MAX_ENTRIES;

  // the loop terminates sooner if we have <5 inputs
  int count = totalInputs < MAX_ENTRIES ? totalInputs : MAX_ENTRIES;

  for (int i = 0; i < count; i++) {
    // print within the bounds of the array
    int index = (start + i) % MAX_ENTRIES;
    printf("%s\n", history[index]);
  }
}

int main() {

  size_t size = 0;

  // create history of inputs saving up to 5 lines
  char history[MAX_ENTRIES][MAX_LENGTH];
  int totalInputs = 0;

  struct sigaction act;
  act.sa_handler = handle_sigint;
  act.sa_flags = 0;
  sigemptyset(&act.sa_mask);

  while (true) {
    // get user input
    printf("Enter input: ");
    ssize_t strlen = getline(&line, &size, stdin);

    // remove the '\n' at the end of input
    if (line[strlen - 1] == '\n') {
      line[strlen - 1] = '\0';
    }

    // save user input to history
    strcpy(history[totalInputs % MAX_ENTRIES], line);
    totalInputs++;

    // if the user typed "print", print the last 5 inputs
    if (strcmp(line, "print") == 0) {
      printHistory(history, totalInputs);
    }
  }

  // free the memory
  free(line);

  return 0;
}
